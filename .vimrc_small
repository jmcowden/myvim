set nocompatible

" mouse support
set mouse=a

" Pathogen plugin manager
execute pathogen#infect()

" Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn

" syntax is slow on the pi, so toggle it
nnoremap <leader>so :syntax on<cr>
nnoremap <leader>sf :syntax off<cr>

" turn on relative line numbers
"set relativenumber

" basic preferences - line numbers, tab size, shift width, tabs into spaces
set number
set ts=4
set sw=4
set expandtab

" set smart case for searching
set ignorecase
set smartcase

" fancy up some display characters
set listchars=tab:▸\ ,extends:❯,precedes:❮,nbsp:␣,eol:→,trail:·

" directory explorer
nnoremap <leader>aa :vsp current_directory<cr>:e .<cr> 
" use tab instead of % for paren matching
nnoremap <tab> %
vnoremap <tab> %

" add a buffer of a few lines above/below the current line when scrolling
set scrolloff=5

" make it easy to :vsp
nnoremap \\\ :vsp<cr>

" show options in status bar when tab-completing ex commands
set wildmenu

" textwidth
set textwidth=0
autocmd FileType,BufNewFile,BufRead *.py :setlocal textwidth=79
autocmd FileType,BufNewFile,BufRead *.py :inoremap <tab> <control>-l

" make indents nicer
set autoindent
"syntax on
filetype on
filetype plugin on
filetype indent on

" make comments italic
"highlight Comment cterm=italic
"highlight Comment gui=italic

" experiment with mappings to move lines up/down
nnoremap - ddp
nnoremap _ ddkkp

" take the newline character out of line highlight
nnoremap <c-v> 0v$h

" swap the ' and ` keys for jumping to marks
nnoremap ' `
nnoremap ` '

" turn off joinspaces so that J only uses one space after join
set nojoinspaces

" allow navigating away from buffers with unsaved changes
set hidden

" remap omnicomplete keys
imap <c-l> <c-x><c-o>

" make :vsp open windows on the right instead of the left
set splitright

" turn off swap files
set noswapfile

" show the number of lines/characters selected in visual mode
set showcmd

"improve status bar
set laststatus=2
set statusline=%F\ %m\ %y%=%l,%c\ %P 

" turn on search highlighting
set hlsearch
set incsearch

" turn off beeping
set vb 

" make regexes more readable (turn on magic to level "very magic")
cnoremap s/ s/\v

" turn on unicode
set encoding=utf-8

" remap escape key to jk
inoremap jk <esc>

" show fold nesting, n columns wide
set foldcolumn=3

" remap H/L to move to beginning/end of line
nnoremap H 0
nnoremap L $

vnoremap H 0
vnoremap L $h

" make it easy to edit and source .vimrc/.gvimrc on-the-fly
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" make it easy to add a space after braces in insert mode
inoremap <c-space> <esc>la 

" insert a newline and don't stay in insert mode
nnoremap <c-o> O<esc>

" underlines
vnoremap K di<<u><esc>pa</u>><esc>

" line wrapping prefs
set wrap
set linebreak
set nolist
"set textwidth=0
set wrapmargin=0

" auto-add closing braces and parens
inoremap {      {}<left>
inoremap {<cr>  {<cr>}<esc>O
inoremap {{     {
inoremap {}     {}
inoremap [      []<left>
inoremap [<cr>  [<cr>]<esc>O
inoremap [[     [
inoremap []     []
inoremap (      ()<left>
inoremap (<cr>  (<cr>)<esc>O
inoremap ((     (
inoremap ()     ()

" turn on the matchit plugin to use % to jump between html and other tags
runtime macros/matchit.vim

" hide the special marks for showmark plugin
let showmarks_include = "abcdefghilmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

" show invisible characters
nnoremap <F10> :set invlist<cr>

" turn spellcheck on/off
nnoremap <F11> :set spell!<cr>

" turn on cursor row highlighting
set cursorline

"Use TAB to complete when typing words, else inserts TABs as usual.
"Uses dictionary and source files to find matching words to complete.
"See help completion for source,
"Note: usual completion is on <c-n> but more trouble to press all the time.
"Never type the same word twice and maybe learn a new spellings!
"Use the Linux dictionary when spelling is in doubt.
"Window users can copy the file to their machine.
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<c-n>"
  else
    return "\<Tab>"
  endif
endfunction
:inoremap <Tab> <c-r>=Tab_Or_Complete()<cr>

" function to increment selected numbers, mapped to control-i
function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<c-a>"
  endif
  normal `<
endfunction
vnoremap <c-i> :call Incr()<cr>

